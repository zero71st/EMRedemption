// <auto-generated />
using EMRedemption.Data;
using EMRedemption.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using System;

namespace EMRedemption.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("25611123062150_re-generate model")]
    partial class regeneratemodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("EMRedemption.Entities.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Application")
                        .HasMaxLength(50);

                    b.Property<string>("Callsite")
                        .HasMaxLength(512);

                    b.Property<string>("Exception")
                        .HasMaxLength(512);

                    b.Property<string>("Level")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Logged");

                    b.Property<string>("Logger")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("AppLogs");
                });

            modelBuilder.Entity("EMRedemption.Entities.Redemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FetchBy")
                        .HasMaxLength(30);

                    b.Property<DateTime>("FetchDateTime");

                    b.Property<DateTime>("RedeemDateTime");

                    b.Property<string>("RetailerEmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("RetailerName")
                        .HasMaxLength(100);

                    b.Property<string>("RetailerPhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RetailerStoreName")
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.Property<string>("TransactionID")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Redemptions");
                });

            modelBuilder.Entity("EMRedemption.Entities.RedemptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Points");

                    b.Property<int>("Quantity");

                    b.Property<int>("RedemptionId");

                    b.Property<string>("RewardCode")
                        .HasMaxLength(5);

                    b.Property<string>("RewardName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RedemptionId");

                    b.ToTable("RedemptionItems");
                });

            modelBuilder.Entity("EMRedemption.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddBy")
                        .HasMaxLength(30);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("Amount");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("LotNo")
                        .HasMaxLength(10);

                    b.Property<int>("Quantity");

                    b.Property<int?>("RedemptionItemId");

                    b.Property<string>("RewardCode")
                        .HasMaxLength(5);

                    b.Property<string>("RewardName")
                        .HasMaxLength(100);

                    b.Property<int>("RewardTypeId");

                    b.Property<string>("RewardTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ValidFrom");

                    b.HasKey("Id");

                    b.HasIndex("RedemptionItemId");

                    b.HasIndex("RewardTypeId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("EMRedemption.Entities.RewardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<string>("RewardName")
                        .HasMaxLength(100);

                    b.Property<string>("RewardTypeName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RewardTypes");
                });

            modelBuilder.Entity("EMRedemption.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EMRedemption.Entities.RedemptionItem", b =>
                {
                    b.HasOne("EMRedemption.Entities.Redemption", "Redemption")
                        .WithMany("RedemptionItems")
                        .HasForeignKey("RedemptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMRedemption.Entities.Reward", b =>
                {
                    b.HasOne("EMRedemption.Entities.RedemptionItem", "RedemptionItem")
                        .WithMany("Rewards")
                        .HasForeignKey("RedemptionItemId");

                    b.HasOne("EMRedemption.Entities.RewardType", "RewardType")
                        .WithMany()
                        .HasForeignKey("RewardTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EMRedemption.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EMRedemption.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMRedemption.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EMRedemption.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
